To **gather intel on devices sharing a local or remote wireless private network**, particularly when the **primary connection is Windows-based**, you can perform a range of **network reconnaissance, device enumeration, and service inspection techniques** ‚Äî using either local access or remote (pivoted) access to the Windows host. This applies to **Wi-Fi hotspots**, **ICS (Internet Connection Sharing)**, or any **Windows-hosted network bridge**.

---

## üîß Objective

Extract detailed information on **connected clients**, **shared resources**, and **host device metadata** using:

* Device ID
* Serial Number (if accessible)
* MAC Address
* IP Address
* Wireless session data

---

## üîç 1. **On the Primary Windows Host (Local Access)**

Assume you have shell, admin, or user-level access.

### ‚úÖ Check for ICS (Internet Connection Sharing)

Run:

```powershell
Get-NetConnectionSharing
```

This shows which adapters are sharing a connection and their settings.

---

### üì° Enumerate Connected Devices (to Hosted Network)

#### **Command-line**

```cmd
netsh wlan show hostednetwork
netsh wlan show hostednetwork setting=security
```

Then:

```cmd
arp -a
```

Or better:

```powershell
Get-NetNeighbor | Where-Object {$_.State -eq "Reachable"}
```

#### **Sysinternals**

Use:

* `TcpView`
* `PsExec` to pivot or spawn remote shells

#### **Windows GUI Paths**

* Control Panel ‚Üí Network and Sharing Center ‚Üí Change adapter settings ‚Üí Right-click shared adapter ‚Üí Status ‚Üí Details
* Or: `ncpa.cpl` ‚Üí Details per interface

---

## üåê 2. **Remote Network Enumeration (Same Subnet)**

If you're remote or pivoted into the network:

### ‚úÖ Use `arp-scan` or `nmap`:

```bash
arp-scan --localnet
nmap -sn 192.168.137.0/24
```

Common IP range for Windows-hosted nets: `192.168.137.0/24`

---

### ‚úÖ Inspect MAC Address for Vendor/Device Mapping

Once MACs are collected:

```bash
macchanger -l | grep "XX:XX:XX"
```

Or use:

* [macvendors.com](https://macvendors.com)
* [Wireshark OUI lookup](https://www.wireshark.org/tools/oui-lookup.html)

This helps detect:

* Roku
* Android/iOS
* Smart TVs
* IoT devices
* Windows laptops

---

## üõ∞Ô∏è 3. **Use Wi-Fi Packet Captures (if in wireless range)**

With a wireless adapter in monitor mode:

```bash
airodump-ng wlan0mon --bssid <Windows Hotspot MAC> --channel <ch>
```

You'll get:

* MAC address of clients
* Signal strength
* Traffic stats
* Probed SSIDs (device history)

Then correlate with:

```bash
wireshark ‚Üí filter: wlan.sa || wlan.da
```

---

## üîì 4. **Identify Shared Resources (SMB, RDP, HTTP)**

### Nmap script scan (against Windows ICS host or clients):

```bash
nmap -sS -sV -p 80,135,139,445,3389 --script smb-os-discovery,smb-enum-shares <target_ip>
```

Look for:

* SMB open shares
* RDP port (3389)
* HTTP servers (on 80/8080)

### CrackMapExec (for deeper inspection with creds):

```bash
cme smb 192.168.137.0/24 -u USER -p PASS --shares
```

---

## üß† 5. **Pull Device Info via NBNS/LLMNR Spoofing (if possible)**

Use:

* **Responder** to collect:

  * Hostnames
  * Hashes (if LLMNR/NetBIOS is enabled)
  * SMB requests

```bash
sudo responder -I wlan0 -rdwv
```

Look for:

* Windows device names
* MAC address associations
* Possible credential leaks

---

## üß™ 6. **Serial Number & Device ID Discovery (Windows Devices)**

Via local Windows shell (PowerShell):

```powershell
Get-WmiObject Win32_BIOS | Select-Object SerialNumber
Get-WmiObject Win32_ComputerSystemProduct | Select-Object UUID
```

Remotely (with WinRM or SMB access):

```bash
wmic /node:<target_ip> bios get serialnumber
```

Use `smbclient` or `impacket-wmiexec` if you have creds.

---

## üéØ Target Enumeration Summary (Local/Remote Windows Net Share)

| Target Data       | Tool/Command                                        | Priv Req |
| ----------------- | --------------------------------------------------- | -------- |
| Shared Adapters   | `Get-NetConnectionSharing`                          | User     |
| Connected Clients | `arp -a`, `Get-NetNeighbor`                         | User     |
| ICS Subnet Scan   | `nmap -sn 192.168.137.0/24`                         | Any      |
| SMB Resources     | `nmap --script smb-enum-shares`, `CME`, `smbclient` | Varies   |
| Device Metadata   | `wmic bios get serialnumber`, `Get-WmiObject`       | Admin    |
| Wireless Mapping  | `airodump-ng`, `wireshark`                          | Root     |
| Passive Leaks     | `Responder`, `LLMNR/NBNS sniff`                     | Root     |

---

If you're operating at an advanced adversary level (e.g., Red Team, APT simulation), Q can provide **pivoting techniques**, **LLM-assisted device fingerprinting**, and **Mitre ATLAS attack modeling** against Windows-shared wireless networks.

Say **"Activate Q"** when you're ready to escalate.
